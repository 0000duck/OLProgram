//////////////////////////////////////////////////////////////////////////
//
//  数学基础库（头文件）
//
//  2016.10.28 by qqs
//
//////////////////////////////////////////////////////////////////////////

#pragma once

const double CVALUE = 0.01;
const double PI = 3.1415926535898;
#define MIN_DBL 1.0e-10
#define MAX_DBL 1.0e+10
#define MIN_LEN 1.0e-8

#define iszero(x)	(fabs(x)<MIN_LEN?TRUE:FALSE)


//////////////////////////////////////////////////////////////////////////
// 基础点和向量
//////////////////////////////////////////////////////////////////////////
typedef double PNT3D[3];
typedef double VEC3D[3];
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
// RFRAME：坐标系
//////////////////////////////////////////////////////////////////////////
struct _ref_fm3d
{
	VEC3D X, Y, Z;
	PNT3D O;
};
typedef struct _ref_fm3d RFRAME;
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
// 去掉CString字符串小数点之后的末尾0
//////////////////////////////////////////////////////////////////////////
void TrimZeroForCSring(CString& str);
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
// 求点到直线的距离
//////////////////////////////////////////////////////////////////////////
double mathDistPntLin(PNT3D p, PNT3D begin, VEC3D dir);
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
// 计算3D点的距离
//////////////////////////////////////////////////////////////////////////
double mathDis3D(PNT3D pt1, PNT3D pt2);
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
// 将向量绕着轴axis和点pivot旋转角度angle，得到旋后的向量rot_v
//////////////////////////////////////////////////////////////////////////
void mathRotVec(VEC3D  axis,   // [IN] 旋转轴方向
				PNT3D  pivot,  // [IN] 旋转轴过点
				double angle,  // [IN] 旋转角度
				VEC3D  v,      // [IN] 原始向量
				VEC3D  rot_v); // [OUT]旋转后向量
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
// 求点p在直线（起点为begin，方向为dir）上的投影点prj_p
//////////////////////////////////////////////////////////////////////////
void mathPrjPntLin(PNT3D p,      // [IN]  原始点
				   PNT3D begin,  // [IN]  直线起点
				   VEC3D dir,    // [IN]  直线方向
				   PNT3D prj_p); // [OUT] 投影点
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
// 将点p绕轴经过pivot点的旋转轴axis旋转
//////////////////////////////////////////////////////////////////////////
void mathRotPnt(VEC3D  axis,   // [IN] 旋转轴方向
				PNT3D  pivot,  // [IN] 旋转轴过点
				double angle,  // [IN] 旋转角度
				PNT3D  p,      // [IN] 原始点
				PNT3D  rot_p); // [OUT]旋转后的点
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
// 将坐标系绕轴经过p点的旋转轴axis旋转
//////////////////////////////////////////////////////////////////////////
void mathRotateRFrame(PNT3D   p,     // [IN]	   旋转轴过点
					  VEC3D   axis,  // [IN]	   旋转轴
					  double  angle, // [IN]     旋转角度
					  RFRAME& pLF);  // [IN&OUT] 输入和输出坐标系
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
// 初始化坐标系
//////////////////////////////////////////////////////////////////////////
void mathInitRFrame(RFRAME& pLF);
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
// 平移坐标系
//////////////////////////////////////////////////////////////////////////
void mathMoveRFrame(VEC3D translateVector, // [IN]     平移向量
					RFRAME& pLF) ;         // [IN&OUT] 输入和输出坐标系
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
// 已知点世界坐标系下的坐标点，求其在局部坐标系中的坐标值
//////////////////////////////////////////////////////////////////////////
void mathTransWorldPnt3D(RFRAME& local_frame, // [IN] 局部坐标系
						 PNT3D world_point,   // [IN] 世界坐标系下的点坐标
						 PNT3D local_point);  // [OUT]局部坐标系下的点坐标
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
// 已知点在局部坐标系下的坐标点，求其在世界坐标系中的坐标值
//////////////////////////////////////////////////////////////////////////
void mathTransLocalPnt3D(RFRAME& local_frame, // [IN] 局部坐标系
						 PNT3D local_point,   // [IN] 局部坐标系下的点坐标
						 PNT3D world_point);  // [OUT]世界坐标系下的点坐标
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
// 向量叉乘
//////////////////////////////////////////////////////////////////////////
void mathVProduct(VEC3D v1, VEC3D v2, VEC3D rtvec);
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
// 向量点乘
//////////////////////////////////////////////////////////////////////////
double mathOProduct(VEC3D v1, VEC3D v2);
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
// 单位化向量
//////////////////////////////////////////////////////////////////////////
BOOL mathUniVec(VEC3D v, double min_len = 0.0000001);
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
// 向量反向
//////////////////////////////////////////////////////////////////////////
void mathRevVec(VEC3D v);
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
// 将向量e1向e2旋转angle角度
//////////////////////////////////////////////////////////////////////////
void mathRotVecXY(VEC3D e1,     // [IN] 待旋转向量
				  VEC3D e2,     // [IN] 向之旋转的向量
				  double angle, // [IN] 旋转角度
				  VEC3D rot_v); // [OUT]旋转后的向量
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
// 已知向量在世界坐标系下的值，求其在局部坐标系下的值
//////////////////////////////////////////////////////////////////////////
void mathTransWorldVec3D(RFRAME& local_frame, // [IN] 局部坐标系
					 	 VEC3D world_vector,  // [IN] 世界坐标系下的向量
						 VEC3D local_vector); // [OUT]局部坐标系下的向量
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
// 已知向量在局部坐标系下的值，求其在世界坐标系下的值
//////////////////////////////////////////////////////////////////////////
void mathTransLocalVec3D(RFRAME& local_frame, // [IN] 局部坐标系
 						 VEC3D local_vector,  // [IN] 局部坐标系下的向量
						 VEC3D world_vector); // [OUT]世界坐标系下的向量
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
// 反余弦函数
//////////////////////////////////////////////////////////////////////////
double mathACos(double cosAlfa);
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
// 正余弦函数
//////////////////////////////////////////////////////////////////////////
double mathASin(double sinAlfa);
//////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
// 计算两个3D向量的夹角: 0.0 <= angle <= PI1
//////////////////////////////////////////////////////////////////////////
double mathGetAngle(VEC3D v1, VEC3D v2, double min_len);
//////////////////////////////////////////////////////////////////////////